****** O Princípio de Substituição de Liskov diz que:

Objetos em um programa devem ser substituíveis por instâncias de seus subtipos, sem alterar a funcionalidade do programa.

Isso quer dizer que se você possui uma superclasse A e uma subclasse B , onde quer que A seja esperada, se B for passada seu programa deve se comportar da mesma forma.

Podemos estender isso para uma interface (já que uma interface pode ser vista como uma classe abstrata com todos os métodos e elementos públicos, e nenhum método implementado): se A é uma interface, e B é uma classe que implementa A , onde quer que seja esperada algo do tipo A , se B for passada seu programa deve se comportar da mesma forma.

'uma subclasse tem que se comportar igual a classe mãe. Tem que ser capaz de fazer o que a classe mae faz'

                class B {}

                class A extends B {}    // classe A herda da classe B

                const foo = (arg: B) => {
                    // o compormatamento deve ser o mesmo para A e B
                } 
                
                // se eu tenho um argumento to tipo B eu posso passar para ele um tipo A -> foo(new A())
                

                foo(new A());

            // em todo lugar do codigo poso passar a classe filha onde espera a mãe
            // 'foo' teoricamente recebe B em sua base, mas pode receber A também porque é uma classe filha




****** Interface Segregation Principle - ISP

O Princípio da Segregação de Interface afirma que:
Nenhum cliente deve ser forçado a depender de métodos que não utiliza

Isso quer dizer que devemos separar as interfaces e as compor conforme for necessário, fazendo com que uma entidade (classe) não precise implementar coisas que ela não vai usar.





// S - SRP - PRA QUÊ ESTOU UTILIZANDO O MEU MÉTODO? CADA METODO/CLASSE/MODULO TEM UM CASO DE USO.
// O - OPEN AND CLOSE
// L - NÃO POSSO ALTERAR O COMPORTAMENTO DA CLASSE PAI NA CLASSE FILHA. SÓ POSSO EXTENDER.
// D - MÓDULOS EXTERNOS NÃO PODEM DEPENDER DE MÓDULOS INTERNOS. // DEPENDER DE ABSTRAÇÕES
// I - MÓDULOS CONVERSAM POR ABSTRAÇÕES E INTERFACES, e um módulo NÃO PODE DEPENDER DE COISAS QUE ELE NÃO UTILIZA.
// I - AO INVÉS DE TER UMA INTERFACE QUE FAZ TUDO, TER INTERFACES MENORES (DESACOPLAR O CÓDIGO)