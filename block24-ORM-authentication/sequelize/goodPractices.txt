Quando criamos o nosso arquivo config.json dentro da pasta config , vimos que as informa√ß√µes sens√≠veis, como credenciais de acesso ao banco de dados, estavam todas expostas no nosso c√≥digo. üò±
S√≥ fizemos isso para fins did√°ticos. Como voc√™s j√° sabem, uma √≥tima pr√°tica √© usar vari√°veis de ambiente para controlar coisas relacionadas √† configura√ß√£o geral da aplica√ß√£o

1) npm install dotenv
instala√ß√£o do pacote

2) Mudaremos o nome do nosso arquivo config.json para config.js

3) Retiraremos todo o conte√∫do de config.js e substituiremos pelo c√≥digo abaixo:

require('dotenv').config();

module.exports = {
  development: {
    username: process.env.MYSQL_USER,
    password: process.env.MYSQL_PASSWORD,
    database: process.env.MYSQL_DATABASE,
    host: process.env.HOSTNAME,
    dialect: 'mysql',
  },
  test: {
    username: process.env.MYSQL_USER,
    password: process.env.MYSQL_PASSWORD,
    database: process.env.MYSQL_DATABASE,
    host: process.env.HOSTNAME,
    dialect: 'mysql',
  },
  production: {
    username: process.env.MYSQL_USER,
    password: process.env.MYSQL_PASSWORD,
    database: process.env.MYSQL_DATABASE,
    host: process.env.HOSTNAME,
    dialect: 'mysql',
  },
};


4) Crie o arquivo .env na raiz da sua aplica√ß√£o e preencha as vari√°veis com as suas credenciais para acessar o MySQL.

5) Modifique a linha 8 do arquivo models/index.js para apontar para o arquivo config.js :

const config = require(__dirname + '/../config/config.json')[env]; // configura√ß√£o antiga
const config = require(__dirname + '/../config/config.js')[env];   // configura√ß√£o nova