1) npm init -y

2) npm install sequelize

3) npm install sequelize-cli

4) npm install mysql2

5) npx sequelize-cli init:
   
     -create:

    config : contém um arquivo de configuração, que "fala" para o CLI como conectar-se com o nosso banco de dados;
    models : contém todos os modelos da nossa aplicação;
    migrations : contém todos os arquivos de migração da nossa aplicação;
    seeders : contém todos os arquivos de "seeds".

6) configure config.json:

    {
    "development": {
        "username": "root",
        "password": "24049504",
        "database": "orm_example",
        "host": "127.0.0.1",
        "dialect": "mysql"
    }

    // No resto do arquivo você vai encontrar as convenções para conectar o Sequelize em outros ambientes
    }

7) npx sequelize db:create      (create database)

8) mysql -u brenomatias@localhost -p   (acessar o sql pelo cli)

9) npx sequelize model:generate --name User --attributes fullName:string

    Queremos criar uma tabela Users
   é gerar um model que irá representar uma Instância de usuário , ou uma linha na tabela Users no nosso banco

   user.js created in models
   create-user.js in migrations

10)  não iremos trabalhar com classes, mas sim com a função sequelize.define()

            substituir o codigo em models/user.js por: 
        
        const User = (sequelize, DataTypes) => {
        const User = sequelize.define("User", {
        fullName: DataTypes.STRING,
            email: DataTypes.STRING,
        });

        return User;
        };

        module.exports = User;

11) Como fizemos no model, vamos adicionar uma coluna de email na migration da tabela Users . 

Com a migration criada, devemos adicionar o que ela de fato irá fazer, tanto na execução ( up ), quanto na reversão ( down )

12) npx sequelize db:migrate

Com a migration criada

(revert migration: npx sequelize db:migrate:undo)

13) npx sequelize migration:generate --name add-column-phone-table-users

Criando uma nova migration para alterar uma tabela já existente
salvar o telefone do usuário

14) nserir a função queryInterface.addColumn() no escopo Up par adicionar uma nova coluna a nossa tabela Users , e adicionar a função queryInterface.removeColumn() no escopo Down para remover a nova coluna da tabela.

15) npx sequelize db:migrate
executar a nossa nova migration


16) alteramos o model user.js para incluir a nova coluna phone_num
  // aqui inserimos o datatype da coluna criada
  phone_num: DataTypes.STRING,


17) npx sequelize seed:generate --name users 
create seeder

18) no arquivo criado em users: xxxxxx-users.js em /seeders
passar os valores para serem povoados

19) npx sequelize db:seed:all
execute seeder
(undo seeder: npx sequelize db:seed:undo:all)

20) Criar as funçoes de interação com o banco de dados no controllers

21) terminar chamando os processos no index.js na raiz do projeto